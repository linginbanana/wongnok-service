// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_test

import (
	"wongnok/internal/model"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHandler creates a new instance of MockIHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHandler {
	mock := &MockIHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHandler is an autogenerated mock type for the IHandler type
type MockIHandler struct {
	mock.Mock
}

type MockIHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHandler) EXPECT() *MockIHandler_Expecter {
	return &MockIHandler_Expecter{mock: &_m.Mock}
}

// GetRecipes provides a mock function for the type MockIHandler
func (_mock *MockIHandler) GetRecipes(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_GetRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecipes'
type MockIHandler_GetRecipes_Call struct {
	*mock.Call
}

// GetRecipes is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) GetRecipes(ctx interface{}) *MockIHandler_GetRecipes_Call {
	return &MockIHandler_GetRecipes_Call{Call: _e.mock.On("GetRecipes", ctx)}
}

func (_c *MockIHandler_GetRecipes_Call) Run(run func(ctx *gin.Context)) *MockIHandler_GetRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_GetRecipes_Call) Return() *MockIHandler_GetRecipes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_GetRecipes_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_GetRecipes_Call {
	_c.Run(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetByID(id string) (model.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockIRepository_Expecter) GetByID(id interface{}) *MockIRepository_GetByID_Call {
	return &MockIRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIRepository_GetByID_Call) Run(run func(id string)) *MockIRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_GetByID_Call) Return(user model.User, err error) *MockIRepository_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIRepository_GetByID_Call) RunAndReturn(run func(id string) (model.User, error)) *MockIRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecipes provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetRecipes(userID string) (model.FoodRecipes, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipes")
	}

	var r0 model.FoodRecipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.FoodRecipes, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.FoodRecipes); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecipes'
type MockIRepository_GetRecipes_Call struct {
	*mock.Call
}

// GetRecipes is a helper method to define mock.On call
//   - userID string
func (_e *MockIRepository_Expecter) GetRecipes(userID interface{}) *MockIRepository_GetRecipes_Call {
	return &MockIRepository_GetRecipes_Call{Call: _e.mock.On("GetRecipes", userID)}
}

func (_c *MockIRepository_GetRecipes_Call) Run(run func(userID string)) *MockIRepository_GetRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_GetRecipes_Call) Return(foodRecipes model.FoodRecipes, err error) *MockIRepository_GetRecipes_Call {
	_c.Call.Return(foodRecipes, err)
	return _c
}

func (_c *MockIRepository_GetRecipes_Call) RunAndReturn(run func(userID string) (model.FoodRecipes, error)) *MockIRepository_GetRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Upsert(user *model.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockIRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - user *model.User
func (_e *MockIRepository_Expecter) Upsert(user interface{}) *MockIRepository_Upsert_Call {
	return &MockIRepository_Upsert_Call{Call: _e.mock.On("Upsert", user)}
}

func (_c *MockIRepository_Upsert_Call) Run(run func(user *model.User)) *MockIRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.User
		if args[0] != nil {
			arg0 = args[0].(*model.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Upsert_Call) Return(err error) *MockIRepository_Upsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_Upsert_Call) RunAndReturn(run func(user *model.User) error) *MockIRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function for the type MockIService
func (_mock *MockIService) GetByID(claims model.Claims) (model.User, error) {
	ret := _mock.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Claims) (model.User, error)); ok {
		return returnFunc(claims)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Claims) model.User); ok {
		r0 = returnFunc(claims)
	} else {
		r0 = ret.Get(0).(model.User)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Claims) error); ok {
		r1 = returnFunc(claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - claims model.Claims
func (_e *MockIService_Expecter) GetByID(claims interface{}) *MockIService_GetByID_Call {
	return &MockIService_GetByID_Call{Call: _e.mock.On("GetByID", claims)}
}

func (_c *MockIService_GetByID_Call) Run(run func(claims model.Claims)) *MockIService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Claims
		if args[0] != nil {
			arg0 = args[0].(model.Claims)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_GetByID_Call) Return(user model.User, err error) *MockIService_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIService_GetByID_Call) RunAndReturn(run func(claims model.Claims) (model.User, error)) *MockIService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecipes provides a mock function for the type MockIService
func (_mock *MockIService) GetRecipes(userID string, claims model.Claims) (model.FoodRecipes, error) {
	ret := _mock.Called(userID, claims)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipes")
	}

	var r0 model.FoodRecipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, model.Claims) (model.FoodRecipes, error)); ok {
		return returnFunc(userID, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(string, model.Claims) model.FoodRecipes); ok {
		r0 = returnFunc(userID, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, model.Claims) error); ok {
		r1 = returnFunc(userID, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_GetRecipes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecipes'
type MockIService_GetRecipes_Call struct {
	*mock.Call
}

// GetRecipes is a helper method to define mock.On call
//   - userID string
//   - claims model.Claims
func (_e *MockIService_Expecter) GetRecipes(userID interface{}, claims interface{}) *MockIService_GetRecipes_Call {
	return &MockIService_GetRecipes_Call{Call: _e.mock.On("GetRecipes", userID, claims)}
}

func (_c *MockIService_GetRecipes_Call) Run(run func(userID string, claims model.Claims)) *MockIService_GetRecipes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 model.Claims
		if args[1] != nil {
			arg1 = args[1].(model.Claims)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIService_GetRecipes_Call) Return(foodRecipes model.FoodRecipes, err error) *MockIService_GetRecipes_Call {
	_c.Call.Return(foodRecipes, err)
	return _c
}

func (_c *MockIService_GetRecipes_Call) RunAndReturn(run func(userID string, claims model.Claims) (model.FoodRecipes, error)) *MockIService_GetRecipes_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertWithClaims provides a mock function for the type MockIService
func (_mock *MockIService) UpsertWithClaims(claims model.Claims) (model.User, error) {
	ret := _mock.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for UpsertWithClaims")
	}

	var r0 model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Claims) (model.User, error)); ok {
		return returnFunc(claims)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Claims) model.User); ok {
		r0 = returnFunc(claims)
	} else {
		r0 = ret.Get(0).(model.User)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Claims) error); ok {
		r1 = returnFunc(claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_UpsertWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertWithClaims'
type MockIService_UpsertWithClaims_Call struct {
	*mock.Call
}

// UpsertWithClaims is a helper method to define mock.On call
//   - claims model.Claims
func (_e *MockIService_Expecter) UpsertWithClaims(claims interface{}) *MockIService_UpsertWithClaims_Call {
	return &MockIService_UpsertWithClaims_Call{Call: _e.mock.On("UpsertWithClaims", claims)}
}

func (_c *MockIService_UpsertWithClaims_Call) Run(run func(claims model.Claims)) *MockIService_UpsertWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.Claims
		if args[0] != nil {
			arg0 = args[0].(model.Claims)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_UpsertWithClaims_Call) Return(user model.User, err error) *MockIService_UpsertWithClaims_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIService_UpsertWithClaims_Call) RunAndReturn(run func(claims model.Claims) (model.User, error)) *MockIService_UpsertWithClaims_Call {
	_c.Call.Return(run)
	return _c
}
