// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package config_test

import (
	"context"

	"github.com/coreos/go-oidc"
	mock "github.com/stretchr/testify/mock"
	"golang.org/x/oauth2"
)

// NewMockIOAuth2Config creates a new instance of MockIOAuth2Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOAuth2Config(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOAuth2Config {
	mock := &MockIOAuth2Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOAuth2Config is an autogenerated mock type for the IOAuth2Config type
type MockIOAuth2Config struct {
	mock.Mock
}

type MockIOAuth2Config_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOAuth2Config) EXPECT() *MockIOAuth2Config_Expecter {
	return &MockIOAuth2Config_Expecter{mock: &_m.Mock}
}

// AuthCodeURL provides a mock function for the type MockIOAuth2Config
func (_mock *MockIOAuth2Config) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(state, opts)
	} else {
		tmpRet = _mock.Called(state)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeURL")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, ...oauth2.AuthCodeOption) string); ok {
		r0 = returnFunc(state, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockIOAuth2Config_AuthCodeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCodeURL'
type MockIOAuth2Config_AuthCodeURL_Call struct {
	*mock.Call
}

// AuthCodeURL is a helper method to define mock.On call
//   - state string
//   - opts ...oauth2.AuthCodeOption
func (_e *MockIOAuth2Config_Expecter) AuthCodeURL(state interface{}, opts ...interface{}) *MockIOAuth2Config_AuthCodeURL_Call {
	return &MockIOAuth2Config_AuthCodeURL_Call{Call: _e.mock.On("AuthCodeURL",
		append([]interface{}{state}, opts...)...)}
}

func (_c *MockIOAuth2Config_AuthCodeURL_Call) Run(run func(state string, opts ...oauth2.AuthCodeOption)) *MockIOAuth2Config_AuthCodeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []oauth2.AuthCodeOption
		var variadicArgs []oauth2.AuthCodeOption
		if len(args) > 1 {
			variadicArgs = args[1].([]oauth2.AuthCodeOption)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockIOAuth2Config_AuthCodeURL_Call) Return(s string) *MockIOAuth2Config_AuthCodeURL_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockIOAuth2Config_AuthCodeURL_Call) RunAndReturn(run func(state string, opts ...oauth2.AuthCodeOption) string) *MockIOAuth2Config_AuthCodeURL_Call {
	_c.Call.Return(run)
	return _c
}

// Exchange provides a mock function for the type MockIOAuth2Config
func (_mock *MockIOAuth2Config) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, code, opts)
	} else {
		tmpRet = _mock.Called(ctx, code)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 *oauth2.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...oauth2.AuthCodeOption) (*oauth2.Token, error)); ok {
		return returnFunc(ctx, code, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...oauth2.AuthCodeOption) *oauth2.Token); ok {
		r0 = returnFunc(ctx, code, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...oauth2.AuthCodeOption) error); ok {
		r1 = returnFunc(ctx, code, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOAuth2Config_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type MockIOAuth2Config_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - opts ...oauth2.AuthCodeOption
func (_e *MockIOAuth2Config_Expecter) Exchange(ctx interface{}, code interface{}, opts ...interface{}) *MockIOAuth2Config_Exchange_Call {
	return &MockIOAuth2Config_Exchange_Call{Call: _e.mock.On("Exchange",
		append([]interface{}{ctx, code}, opts...)...)}
}

func (_c *MockIOAuth2Config_Exchange_Call) Run(run func(ctx context.Context, code string, opts ...oauth2.AuthCodeOption)) *MockIOAuth2Config_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []oauth2.AuthCodeOption
		var variadicArgs []oauth2.AuthCodeOption
		if len(args) > 2 {
			variadicArgs = args[2].([]oauth2.AuthCodeOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockIOAuth2Config_Exchange_Call) Return(token *oauth2.Token, err error) *MockIOAuth2Config_Exchange_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockIOAuth2Config_Exchange_Call) RunAndReturn(run func(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error)) *MockIOAuth2Config_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOIDCTokenVerifier creates a new instance of MockIOIDCTokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOIDCTokenVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOIDCTokenVerifier {
	mock := &MockIOIDCTokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOIDCTokenVerifier is an autogenerated mock type for the IOIDCTokenVerifier type
type MockIOIDCTokenVerifier struct {
	mock.Mock
}

type MockIOIDCTokenVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOIDCTokenVerifier) EXPECT() *MockIOIDCTokenVerifier_Expecter {
	return &MockIOIDCTokenVerifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function for the type MockIOIDCTokenVerifier
func (_mock *MockIOIDCTokenVerifier) Verify(ctx context.Context, rawIDToken string) (*oidc.IDToken, error) {
	ret := _mock.Called(ctx, rawIDToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *oidc.IDToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*oidc.IDToken, error)); ok {
		return returnFunc(ctx, rawIDToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *oidc.IDToken); ok {
		r0 = returnFunc(ctx, rawIDToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.IDToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, rawIDToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOIDCTokenVerifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockIOIDCTokenVerifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - rawIDToken string
func (_e *MockIOIDCTokenVerifier_Expecter) Verify(ctx interface{}, rawIDToken interface{}) *MockIOIDCTokenVerifier_Verify_Call {
	return &MockIOIDCTokenVerifier_Verify_Call{Call: _e.mock.On("Verify", ctx, rawIDToken)}
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) Run(run func(ctx context.Context, rawIDToken string)) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) Return(iDToken *oidc.IDToken, err error) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Return(iDToken, err)
	return _c
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) RunAndReturn(run func(ctx context.Context, rawIDToken string) (*oidc.IDToken, error)) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOIDCIDToken creates a new instance of MockIOIDCIDToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOIDCIDToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOIDCIDToken {
	mock := &MockIOIDCIDToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOIDCIDToken is an autogenerated mock type for the IOIDCIDToken type
type MockIOIDCIDToken struct {
	mock.Mock
}

type MockIOIDCIDToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOIDCIDToken) EXPECT() *MockIOIDCIDToken_Expecter {
	return &MockIOIDCIDToken_Expecter{mock: &_m.Mock}
}

// Claims provides a mock function for the type MockIOIDCIDToken
func (_mock *MockIOIDCIDToken) Claims(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Claims")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOIDCIDToken_Claims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claims'
type MockIOIDCIDToken_Claims_Call struct {
	*mock.Call
}

// Claims is a helper method to define mock.On call
//   - v any
func (_e *MockIOIDCIDToken_Expecter) Claims(v interface{}) *MockIOIDCIDToken_Claims_Call {
	return &MockIOIDCIDToken_Claims_Call{Call: _e.mock.On("Claims", v)}
}

func (_c *MockIOIDCIDToken_Claims_Call) Run(run func(v any)) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOIDCIDToken_Claims_Call) Return(err error) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOIDCIDToken_Claims_Call) RunAndReturn(run func(v any) error) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Return(run)
	return _c
}
