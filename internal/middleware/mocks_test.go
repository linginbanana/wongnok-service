// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package middleware_test

import (
	"context"

	"github.com/coreos/go-oidc"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOIDCTokenVerifier creates a new instance of MockIOIDCTokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOIDCTokenVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOIDCTokenVerifier {
	mock := &MockIOIDCTokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOIDCTokenVerifier is an autogenerated mock type for the IOIDCTokenVerifier type
type MockIOIDCTokenVerifier struct {
	mock.Mock
}

type MockIOIDCTokenVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOIDCTokenVerifier) EXPECT() *MockIOIDCTokenVerifier_Expecter {
	return &MockIOIDCTokenVerifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function for the type MockIOIDCTokenVerifier
func (_mock *MockIOIDCTokenVerifier) Verify(ctx context.Context, rawIDToken string) (*oidc.IDToken, error) {
	ret := _mock.Called(ctx, rawIDToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 *oidc.IDToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*oidc.IDToken, error)); ok {
		return returnFunc(ctx, rawIDToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *oidc.IDToken); ok {
		r0 = returnFunc(ctx, rawIDToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oidc.IDToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, rawIDToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOIDCTokenVerifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockIOIDCTokenVerifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - ctx context.Context
//   - rawIDToken string
func (_e *MockIOIDCTokenVerifier_Expecter) Verify(ctx interface{}, rawIDToken interface{}) *MockIOIDCTokenVerifier_Verify_Call {
	return &MockIOIDCTokenVerifier_Verify_Call{Call: _e.mock.On("Verify", ctx, rawIDToken)}
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) Run(run func(ctx context.Context, rawIDToken string)) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) Return(iDToken *oidc.IDToken, err error) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Return(iDToken, err)
	return _c
}

func (_c *MockIOIDCTokenVerifier_Verify_Call) RunAndReturn(run func(ctx context.Context, rawIDToken string) (*oidc.IDToken, error)) *MockIOIDCTokenVerifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIOIDCIDToken creates a new instance of MockIOIDCIDToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOIDCIDToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOIDCIDToken {
	mock := &MockIOIDCIDToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOIDCIDToken is an autogenerated mock type for the IOIDCIDToken type
type MockIOIDCIDToken struct {
	mock.Mock
}

type MockIOIDCIDToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOIDCIDToken) EXPECT() *MockIOIDCIDToken_Expecter {
	return &MockIOIDCIDToken_Expecter{mock: &_m.Mock}
}

// Claims provides a mock function for the type MockIOIDCIDToken
func (_mock *MockIOIDCIDToken) Claims(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Claims")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOIDCIDToken_Claims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claims'
type MockIOIDCIDToken_Claims_Call struct {
	*mock.Call
}

// Claims is a helper method to define mock.On call
//   - v any
func (_e *MockIOIDCIDToken_Expecter) Claims(v interface{}) *MockIOIDCIDToken_Claims_Call {
	return &MockIOIDCIDToken_Claims_Call{Call: _e.mock.On("Claims", v)}
}

func (_c *MockIOIDCIDToken_Claims_Call) Run(run func(v any)) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOIDCIDToken_Claims_Call) Return(err error) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOIDCIDToken_Claims_Call) RunAndReturn(run func(v any) error) *MockIOIDCIDToken_Claims_Call {
	_c.Call.Return(run)
	return _c
}
