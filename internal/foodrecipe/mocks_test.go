// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package foodrecipe_test

import (
	"wongnok/internal/model"
	"wongnok/internal/model/dto"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHandler creates a new instance of MockIHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHandler {
	mock := &MockIHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHandler is an autogenerated mock type for the IHandler type
type MockIHandler struct {
	mock.Mock
}

type MockIHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHandler) EXPECT() *MockIHandler_Expecter {
	return &MockIHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIHandler
func (_mock *MockIHandler) Create(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) Create(ctx interface{}) *MockIHandler_Create_Call {
	return &MockIHandler_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *MockIHandler_Create_Call) Run(run func(ctx *gin.Context)) *MockIHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_Create_Call) Return() *MockIHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_Create_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function for the type MockIHandler
func (_mock *MockIHandler) Delete(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) Delete(ctx interface{}) *MockIHandler_Delete_Call {
	return &MockIHandler_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockIHandler_Delete_Call) Run(run func(ctx *gin.Context)) *MockIHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_Delete_Call) Return() *MockIHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_Delete_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function for the type MockIHandler
func (_mock *MockIHandler) Get(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) Get(ctx interface{}) *MockIHandler_Get_Call {
	return &MockIHandler_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockIHandler_Get_Call) Run(run func(ctx *gin.Context)) *MockIHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_Get_Call) Return() *MockIHandler_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_Get_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_Get_Call {
	_c.Run(run)
	return _c
}

// GetByID provides a mock function for the type MockIHandler
func (_mock *MockIHandler) GetByID(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) GetByID(ctx interface{}) *MockIHandler_GetByID_Call {
	return &MockIHandler_GetByID_Call{Call: _e.mock.On("GetByID", ctx)}
}

func (_c *MockIHandler_GetByID_Call) Run(run func(ctx *gin.Context)) *MockIHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_GetByID_Call) Return() *MockIHandler_GetByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_GetByID_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_GetByID_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type MockIHandler
func (_mock *MockIHandler) Update(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) Update(ctx interface{}) *MockIHandler_Update_Call {
	return &MockIHandler_Update_Call{Call: _e.mock.On("Update", ctx)}
}

func (_c *MockIHandler_Update_Call) Run(run func(ctx *gin.Context)) *MockIHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_Update_Call) Return() *MockIHandler_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_Update_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Count() (int64, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int64, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockIRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockIRepository_Expecter) Count() *MockIRepository_Count_Call {
	return &MockIRepository_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockIRepository_Count_Call) Run(run func()) *MockIRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRepository_Count_Call) Return(n int64, err error) *MockIRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockIRepository_Count_Call) RunAndReturn(run func() (int64, error)) *MockIRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Create(recipe *model.FoodRecipe) error {
	ret := _mock.Called(recipe)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.FoodRecipe) error); ok {
		r0 = returnFunc(recipe)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - recipe *model.FoodRecipe
func (_e *MockIRepository_Expecter) Create(recipe interface{}) *MockIRepository_Create_Call {
	return &MockIRepository_Create_Call{Call: _e.mock.On("Create", recipe)}
}

func (_c *MockIRepository_Create_Call) Run(run func(recipe *model.FoodRecipe)) *MockIRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.FoodRecipe
		if args[0] != nil {
			arg0 = args[0].(*model.FoodRecipe)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Create_Call) Return(err error) *MockIRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_Create_Call) RunAndReturn(run func(recipe *model.FoodRecipe) error) *MockIRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Delete(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockIRepository_Expecter) Delete(id interface{}) *MockIRepository_Delete_Call {
	return &MockIRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockIRepository_Delete_Call) Run(run func(id int)) *MockIRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Delete_Call) Return(err error) *MockIRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_Delete_Call) RunAndReturn(run func(id int) error) *MockIRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Get(foodRecipeQuery model.FoodRecipeQuery) (model.FoodRecipes, error) {
	ret := _mock.Called(foodRecipeQuery)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.FoodRecipes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.FoodRecipeQuery) (model.FoodRecipes, error)); ok {
		return returnFunc(foodRecipeQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(model.FoodRecipeQuery) model.FoodRecipes); ok {
		r0 = returnFunc(foodRecipeQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(model.FoodRecipeQuery) error); ok {
		r1 = returnFunc(foodRecipeQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - foodRecipeQuery model.FoodRecipeQuery
func (_e *MockIRepository_Expecter) Get(foodRecipeQuery interface{}) *MockIRepository_Get_Call {
	return &MockIRepository_Get_Call{Call: _e.mock.On("Get", foodRecipeQuery)}
}

func (_c *MockIRepository_Get_Call) Run(run func(foodRecipeQuery model.FoodRecipeQuery)) *MockIRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.FoodRecipeQuery
		if args[0] != nil {
			arg0 = args[0].(model.FoodRecipeQuery)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Get_Call) Return(foodRecipes model.FoodRecipes, err error) *MockIRepository_Get_Call {
	_c.Call.Return(foodRecipes, err)
	return _c
}

func (_c *MockIRepository_Get_Call) RunAndReturn(run func(foodRecipeQuery model.FoodRecipeQuery) (model.FoodRecipes, error)) *MockIRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetByID(id int) (model.FoodRecipe, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (model.FoodRecipe, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) model.FoodRecipe); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *MockIRepository_Expecter) GetByID(id interface{}) *MockIRepository_GetByID_Call {
	return &MockIRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIRepository_GetByID_Call) Run(run func(id int)) *MockIRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_GetByID_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIRepository_GetByID_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIRepository_GetByID_Call) RunAndReturn(run func(id int) (model.FoodRecipe, error)) *MockIRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Update(recipe *model.FoodRecipe) error {
	ret := _mock.Called(recipe)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.FoodRecipe) error); ok {
		r0 = returnFunc(recipe)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - recipe *model.FoodRecipe
func (_e *MockIRepository_Expecter) Update(recipe interface{}) *MockIRepository_Update_Call {
	return &MockIRepository_Update_Call{Call: _e.mock.On("Update", recipe)}
}

func (_c *MockIRepository_Update_Call) Run(run func(recipe *model.FoodRecipe)) *MockIRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.FoodRecipe
		if args[0] != nil {
			arg0 = args[0].(*model.FoodRecipe)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Update_Call) Return(err error) *MockIRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_Update_Call) RunAndReturn(run func(recipe *model.FoodRecipe) error) *MockIRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIService
func (_mock *MockIService) Create(request dto.FoodRecipeRequest, claims model.Claims) (model.FoodRecipe, error) {
	ret := _mock.Called(request, claims)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest, model.Claims) (model.FoodRecipe, error)); ok {
		return returnFunc(request, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest, model.Claims) model.FoodRecipe); ok {
		r0 = returnFunc(request, claims)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(dto.FoodRecipeRequest, model.Claims) error); ok {
		r1 = returnFunc(request, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - request dto.FoodRecipeRequest
//   - claims model.Claims
func (_e *MockIService_Expecter) Create(request interface{}, claims interface{}) *MockIService_Create_Call {
	return &MockIService_Create_Call{Call: _e.mock.On("Create", request, claims)}
}

func (_c *MockIService_Create_Call) Run(run func(request dto.FoodRecipeRequest, claims model.Claims)) *MockIService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.FoodRecipeRequest
		if args[0] != nil {
			arg0 = args[0].(dto.FoodRecipeRequest)
		}
		var arg1 model.Claims
		if args[1] != nil {
			arg1 = args[1].(model.Claims)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIService_Create_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIService_Create_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIService_Create_Call) RunAndReturn(run func(request dto.FoodRecipeRequest, claims model.Claims) (model.FoodRecipe, error)) *MockIService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockIService
func (_mock *MockIService) Delete(id int, claims model.Claims) error {
	ret := _mock.Called(id, claims)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, model.Claims) error); ok {
		r0 = returnFunc(id, claims)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
//   - claims model.Claims
func (_e *MockIService_Expecter) Delete(id interface{}, claims interface{}) *MockIService_Delete_Call {
	return &MockIService_Delete_Call{Call: _e.mock.On("Delete", id, claims)}
}

func (_c *MockIService_Delete_Call) Run(run func(id int, claims model.Claims)) *MockIService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 model.Claims
		if args[1] != nil {
			arg1 = args[1].(model.Claims)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIService_Delete_Call) Return(err error) *MockIService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIService_Delete_Call) RunAndReturn(run func(id int, claims model.Claims) error) *MockIService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIService
func (_mock *MockIService) Get(foodRecipeQuery model.FoodRecipeQuery) (model.FoodRecipes, int64, error) {
	ret := _mock.Called(foodRecipeQuery)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.FoodRecipes
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(model.FoodRecipeQuery) (model.FoodRecipes, int64, error)); ok {
		return returnFunc(foodRecipeQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(model.FoodRecipeQuery) model.FoodRecipes); ok {
		r0 = returnFunc(foodRecipeQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FoodRecipes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(model.FoodRecipeQuery) int64); ok {
		r1 = returnFunc(foodRecipeQuery)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(model.FoodRecipeQuery) error); ok {
		r2 = returnFunc(foodRecipeQuery)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - foodRecipeQuery model.FoodRecipeQuery
func (_e *MockIService_Expecter) Get(foodRecipeQuery interface{}) *MockIService_Get_Call {
	return &MockIService_Get_Call{Call: _e.mock.On("Get", foodRecipeQuery)}
}

func (_c *MockIService_Get_Call) Run(run func(foodRecipeQuery model.FoodRecipeQuery)) *MockIService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 model.FoodRecipeQuery
		if args[0] != nil {
			arg0 = args[0].(model.FoodRecipeQuery)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_Get_Call) Return(foodRecipes model.FoodRecipes, n int64, err error) *MockIService_Get_Call {
	_c.Call.Return(foodRecipes, n, err)
	return _c
}

func (_c *MockIService_Get_Call) RunAndReturn(run func(foodRecipeQuery model.FoodRecipeQuery) (model.FoodRecipes, int64, error)) *MockIService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIService
func (_mock *MockIService) GetByID(id int) (model.FoodRecipe, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (model.FoodRecipe, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int) model.FoodRecipe); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *MockIService_Expecter) GetByID(id interface{}) *MockIService_GetByID_Call {
	return &MockIService_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIService_GetByID_Call) Run(run func(id int)) *MockIService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_GetByID_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIService_GetByID_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIService_GetByID_Call) RunAndReturn(run func(id int) (model.FoodRecipe, error)) *MockIService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIService
func (_mock *MockIService) Update(request dto.FoodRecipeRequest, id int, claims model.Claims) (model.FoodRecipe, error) {
	ret := _mock.Called(request, id, claims)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest, int, model.Claims) (model.FoodRecipe, error)); ok {
		return returnFunc(request, id, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest, int, model.Claims) model.FoodRecipe); ok {
		r0 = returnFunc(request, id, claims)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(dto.FoodRecipeRequest, int, model.Claims) error); ok {
		r1 = returnFunc(request, id, claims)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - request dto.FoodRecipeRequest
//   - id int
//   - claims model.Claims
func (_e *MockIService_Expecter) Update(request interface{}, id interface{}, claims interface{}) *MockIService_Update_Call {
	return &MockIService_Update_Call{Call: _e.mock.On("Update", request, id, claims)}
}

func (_c *MockIService_Update_Call) Run(run func(request dto.FoodRecipeRequest, id int, claims model.Claims)) *MockIService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.FoodRecipeRequest
		if args[0] != nil {
			arg0 = args[0].(dto.FoodRecipeRequest)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 model.Claims
		if args[2] != nil {
			arg2 = args[2].(model.Claims)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIService_Update_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIService_Update_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIService_Update_Call) RunAndReturn(run func(request dto.FoodRecipeRequest, id int, claims model.Claims) (model.FoodRecipe, error)) *MockIService_Update_Call {
	_c.Call.Return(run)
	return _c
}
